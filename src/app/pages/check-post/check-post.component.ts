import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { MatPaginator } from '@angular/material/paginator';
import { MatSort } from '@angular/material/sort';
import { MatTableDataSource } from '@angular/material/table';
import moment from 'moment';
import Swal from 'sweetalert2';
import * as XLSX from 'xlsx';
declare const window: any;
@Component({
  selector: 'app-check-post',
  templateUrl: './check-post.component.html',
  styleUrls: ['./check-post.component.scss'],
})
export class CheckPostComponent implements OnInit {
  constructor() {}

  ngOnInit(): void {}
  @ViewChild('paginator2') paginator2!: MatPaginator;
  @ViewChild('swiper') swiper!: ElementRef;
  @ViewChild('MatSort') sort!: MatSort;
  displayedColumns: string[] = [];
  dataSource = new MatTableDataSource<any>([]);
  fileName: string = '';
  xlsxName: string = `‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏¢‡∏≤ ${moment(new Date())
    .add(543, 'year')
    .format('DD-MM-YYYY')}`;
  onFileChange(event: any) {
    if (event.target.files && event.target.files.length > 0) {
      this.fileName = event.target.files[0].name;
    } else {
      this.fileName = '';
    }
    const target: DataTransfer = <DataTransfer>event.target;
    if (target.files.length !== 1) {
      console.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡πÑ‡∏ü‡∏•‡πå');
      return;
    }

    const reader: FileReader = new FileReader();
    reader.onload = (e: any) => {
      const bstr: string = e.target.result;
      const wb: XLSX.WorkBook = XLSX.read(bstr, { type: 'binary' });

      const wsname: string = wb.SheetNames[0];
      const ws: XLSX.WorkSheet = wb.Sheets[wsname];

      // üëâ ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πá‡∏ô array ‡∏ã‡πâ‡∏≠‡∏ô array
      let data: any[][] = XLSX.utils.sheet_to_json(ws, { header: 1 });

      const seen = new Set();
      data = data
        .filter((subArr) => subArr.length > 0 && subArr[0] != null)
        .filter((subArr) => {
          const str = JSON.stringify(subArr);
          if (seen.has(str)) return false; // ‡∏ã‡πâ‡∏≥ ‚Üí ‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å
          seen.add(str);
          return true;
        })
        .map((subArr) => subArr.filter((item) => item != null))
        .map((row, i) => {
          if (i === 0) return row; // header ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á

          const newRow = [...row];

          // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î
          if (typeof row[1] === 'number') {
            newRow[1] = this.excelDateToJSDate(row[1]);
          }

          // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
          if (typeof row[2] === 'number') {
            newRow[2] = this.excelTimeToJSDate(row[2]);
          }

          if (typeof row[8] === 'number') {
            newRow[8] = this.excelDateToJSDate(row[8]);
          }

          return newRow;
        });

      // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô object ‡πÇ‡∏î‡∏¢‡∏ü‡∏¥‡∏Å‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô header
      let headers = data[0];
      const rows = data.slice(1);
      if (headers[headers.length - 1] != '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô') {
        headers[headers.length] = '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô';
      }

      const jsonData = rows
        .map((row: any[]) => {
          const obj: any = {};
          headers.forEach((key: string, index: number) => {
            obj[key] = row[index] ?? null;
          });
          return obj;
        })
        .map((row, index) => ({
          ...row,
          isEditing: false,
          ‡∏•‡∏≥‡∏î‡∏±‡∏ö: index + 1,
        }));

      if (jsonData.length > 0) {
        setTimeout(() => {
          this.swiper.nativeElement.focus();
        }, 100);
      }
      headers[headers.length] = 'Action';
      headers.unshift(headers.pop());
      this.displayedColumns = headers;

      this.dataSource.data = jsonData;
      this.dataSource.sort = this.sort;
      this.dataSource.filterPredicate = (data, filter: string) => {
        const dataStr = Object.values(data).join('‚ó¨').toLowerCase();
        return dataStr.includes(filter);
      };
      this.dataSource.paginator = this.paginator2;
    };
    reader.readAsBinaryString(target.files[0]);
  }
  applyFilter(event: Event) {
    const filterValue = (event.target as HTMLInputElement).value;
    this.dataSource.filter = filterValue.trim().toLowerCase();
  }
  getRecord(val: any) {
    const matches = this.dataSource.data.filter((item: any) => {
      const hn = item['HN - VN'].split('-')[0].trim();
      return hn === val.trim();
    });

    if (matches.length) {
      Swal.fire({
        icon: 'success',
        title: '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
        showConfirmButton: false,
        timer: 1500,
      });
      this.dataSource.data = this.dataSource.data.map((item: any) =>
        item['HN - VN'].split('-')[0].trim() === val.trim()
          ? {
              ...item,

              isEditing: true,
            }
          : item
      );

      if (this.dataSource.data.length > 0) {
        setTimeout(() => {
          this.swiper.nativeElement.focus();
        }, 100);
      }
      this.dataSource.data.sort((a, b) => {
        // 1. Sort by status: false < true
        if (a.isEditing !== b.isEditing) {
          return a.isEditing ? 1 : -1;
        }

        // 2. Sort by ‡∏•‡∏≥‡∏î‡∏±‡∏ö
        return a.‡∏•‡∏≥‡∏î‡∏±‡∏ö - b.‡∏•‡∏≥‡∏î‡∏±‡∏ö;
      });
      this.dataSource.filterPredicate = (data, filter: string) => {
        const dataStr = Object.values(data).join('‚ó¨').toLowerCase();
        return dataStr.includes('');
      };
      this.dataSource.sort = this.sort;
      this.dataSource.paginator = this.paginator2;
    } else {
      Swal.fire({
        icon: 'error',
        title: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
        showConfirmButton: false,
        timer: 1500,
      });
    }
  }
  getRow(element: any) {
    // Do something with the selected row data
    console.log('Selected row:', element);
  }
  editableColumn: string | null = null;
  // onCheckPostClick() {
  //   console.log('‚úÖ Angular Click detected');
  //   window.electron.ipcRenderer2.send('check-post-clicked', {
  //     page: 'check-post',
  //     timestamp: new Date().toISOString(),
  //   });
  // }
  toggleEdit(element: any) {
    // element.isEditing = !element.isEditing;

    // if (!element.isEditing) {
    //   // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î Save ‚Üí ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤
    //   console.log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà:', element);
    //   // TODO: call API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å DB
    // }
    Swal.fire({
      title: '‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?',
      showCancelButton: true,
      confirmButtonText: 'Save',
    }).then((result) => {
      /* Read more about isConfirmed, isDenied below */
      if (result.isConfirmed) {
        element.isEditing = !element.isEditing;

        Swal.fire({
          icon: 'success',
          title: '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
          showConfirmButton: false,
          timer: 1500,
        });
      }

      if (this.dataSource.data.length > 0) {
        setTimeout(() => {
          this.swiper.nativeElement.focus();
        }, 100);
      }
      this.dataSource.data.sort((a, b) => {
        // 1. Sort by status: false < true
        if (a.isEditing !== b.isEditing) {
          return a.isEditing ? 1 : -1;
        }

        // 2. Sort by ‡∏•‡∏≥‡∏î‡∏±‡∏ö
        return a.‡∏•‡∏≥‡∏î‡∏±‡∏ö - b.‡∏•‡∏≥‡∏î‡∏±‡∏ö;
      });
      this.dataSource.filterPredicate = (data, filter: string) => {
        const dataStr = Object.values(data).join('‚ó¨').toLowerCase();
        return dataStr.includes('');
      };
      this.dataSource.sort = this.sort;
      this.dataSource.paginator = this.paginator2;
    });
  }
  excelDateToJSDate(serial: number): string {
    const utc_days = serial - 25569;
    const utc_value = utc_days * 86400;
    const date_info = new Date(utc_value * 1000);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° 543 ‡∏õ‡∏µ‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
    const year = date_info.getUTCFullYear();
    const month = (date_info.getUTCMonth() + 1).toString().padStart(2, '0');
    const day = date_info.getUTCDate().toString().padStart(2, '0');

    return `${day}/${month}/${year}`;
  }

  excelTimeToJSDate(serial: number): string {
    // serial < 1 ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ fraction ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô
    const totalSeconds = Math.round(serial * 24 * 60 * 60);
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    return `${hours.toString().padStart(2, '0')}:${minutes
      .toString()
      .padStart(2, '0')}`;
  }

  // toggleEdit(element: any) {
  //   if (!element.isEditing) {
  //     // --- ‡∏Å‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‚Üí Action ‚Üí Save ---
  //     element.isEditing = true;
  //     this.editableColumn = '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'; // ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
  //   } else {
  //     // --- ‡∏Å‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‚Üí Save ‚Üí Action ---
  //     element.isEditing = false;
  //     this.editableColumn = null;

  //     // TODO: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ API ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å database
  //     console.log('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß:', element);
  //   }
  // }

  // onFileChange(event: any) {
  //   const target: DataTransfer = <DataTransfer>event.target;

  //   if (target.files.length !== 1) {
  //     console.error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á 1 ‡πÑ‡∏ü‡∏•‡πå');
  //     return;
  //   }

  //   const reader: FileReader = new FileReader();
  //   reader.onload = (e: any) => {
  //     /* ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô binary string */
  //     const bstr: string = e.target.result;
  //     const wb: XLSX.WorkBook = XLSX.read(bstr, { type: 'binary' });

  //     /* ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏µ‡∏ó‡πÅ‡∏£‡∏Å */
  //     const wsname: string = wb.SheetNames[0];
  //     const ws: XLSX.WorkSheet = wb.Sheets[wsname];

  //     /* ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON */
  //     this.jsonData = XLSX.utils.sheet_to_json(ws, { header: 1 });
  //     console.log(this.jsonData);
  //     // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ key ‡∏ï‡∏≤‡∏° header row ‡πÉ‡∏ä‡πâ: XLSX.utils.sheet_to_json(ws);
  //   };
  //   reader.readAsBinaryString(target.files[0]);
  // }
}
